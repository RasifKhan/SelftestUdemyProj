go to IproductRepostory 



add this 

    Task<IReadOnlyList<Product>> GetProductAsync(string? brand,string? type,string? sort);








go to productRepostory 


here is the current 



        public async Task<IReadOnlyList<Product>> GetProductAsync(string? brand,string?type)
        {
            var query = context.Products.AsQueryable();

            if (!string.IsNullOrWhiteSpace(brand))
                query = query.Where(x => x.Brand == brand);

            if (!string.IsNullOrWhiteSpace(type))
                query = query.Where(x => x.Type == type);

            return await query.ToListAsync();
        }


need to modify here 


  public async Task<IReadOnlyList<Product>> GetProductAsync(string? brand,string?type,string? sort)
        {
            var query = context.Products.AsQueryable();

            if (!string.IsNullOrWhiteSpace(brand))
                query = query.Where(x => x.Brand == brand);

            if (!string.IsNullOrWhiteSpace(type))
                query = query.Where(x => x.Type == type);

           
                query = sort switch
                {
                    "priceAsc" => query.OrderBy(x => x.Price),
                    "priceDesc" => query.OrderByDescending(x => x.Price),
                    _ => query.OrderBy(x => x.Name)
                };
            
            return await query.ToListAsync();
        }






go to  product contoller


current 

 [HttpGet]
    public async Task<ActionResult<IReadOnlyList<Product>>> GetProducts(string? brand,string? type)
    {
        return Ok(await repo.GetProductAsync(brand,type));
    }



modified 


  [HttpGet]
    public async Task<ActionResult<IReadOnlyList<Product>>> GetProducts(string? brand,
    string? type, string? sort)
    {
        return Ok(await repo.GetProductAsync(brand,type,sort));
    }


restart api


check to postman



ok working

























